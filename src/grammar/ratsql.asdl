-- Assumptions:
--   1. sql is correct
--   2. only table name has alias
--   3. only one intersect/union/except

module RATSQL
{
    sql = (select_stmt select_stmt)

    select_stmt = No_Set(select select,
                        from_ from_,
                        sql_where sql_where,
                        sql_groupby sql_groupby,
                        sql_orderby sql_orderby)
    | INTERSECT(bool all, select_stmt select_stmt1, select_stmt select_stmt2)
    | UNION(bool all, select_stmt select_stmt1, select_stmt select_stmt2)
    | EXCEPT(bool all, select_stmt select_stmt1, select_stmt select_stmt2)

    select = (bool is_distinct, agg* aggs)
    agg = (agg_type agg_type, expr expr)

    from_ = (table_unit* table_units, join_cond* join_conds)

    table_unit = TableUnitSql(select_stmt select_stmt, string alias)
               | Table(table table)

    join_cond = (join_type join_type, expr expr)

    join_type = NATURAL_JOIN
        | INNER_JOIN
        | LEFT_OUTER_JOIN
        | RIGHT_OUTER_JOIN
        | FULL_OUTER_JOIN
        | CROSS_JOIN

    expr = And(expr left, expr right)
         | Or(expr left, expr right)
         | Not(expr expr)
         | All(expr expr)
         | Any(expr expr)
         | Between(expr expr1, expr expr2, expr expr3)
         | Eq(expr expr1, expr expr2)
         | Gt(expr expr1, expr expr2)
         | Lt(expr expr1, expr expr2)
         | Ge(expr expr1, expr expr2)
         | Le(expr expr1, expr expr2)
         | Ne(expr expr1, expr expr2)
         | In(expr expr1, expr expr2)
         | Like(expr expr1, expr expr2)
         | Exists(val expr1)
         | Minus(expr expr1, expr expr2)
         | Plus(expr expr1, expr expr2)
         | Times(expr expr1, expr expr2)
         | Divide(expr expr1, expr expr2)
         | ValSql(select_stmt select_stmt)
         | ColUnit(col_unit col_unit)
         | String(string string)
         | Number(float number)
         | Terminal

    col_unit = (
      agg_type agg_type,
      column column,
      bool is_distinct
    )

    sql_where = (
      expr? where,
    )

    sql_groupby = (
      col_unit* group_by,
      expr? having,
    )

    sql_orderby = (
      order_by* order_by,
      int? limit,
    )

    order_by = (order order, expr expr)
    agg_type = NoneAggOp | Max | Min | Count | Sum | Avg
    order = Asc | Desc | Default

    column = (string col_str)
    table = (string tab_str)
}
